// Code generated by girgen. DO NOT EDIT.

package gi

/*
#cgo pkg-config: girepository-2.0
#include <girepository/girepository.h>
*/
import "C"

import (
	"structs"
	"unsafe"

	"deedles.dev/gir/g"
)

var TypeArgInfo = g.ToType[ArgInfo](uint64(C.gi_arg_info_get_type()))

type ArgInfo struct {
	_ structs.HostLayout
	BaseInfo
	_ [48]byte
}

func (obj *ArgInfo) c() *C.GIArgInfo {
	return (*C.GIArgInfo)(unsafe.Pointer(obj))
}

func (obj *ArgInfo) AsGIArgInfo() *ArgInfo {
	return obj
}

type AttributeIter struct {
	_ structs.HostLayout
	_ [40]byte
}

func (s *AttributeIter) c() *C.GIAttributeIter {
	return (*C.GIAttributeIter)(unsafe.Pointer(s))
}

var TypeBaseInfo = g.ToType[BaseInfo](uint64(C.gi_base_info_get_type()))

type BaseInfo struct {
	_ structs.HostLayout
	g.TypeInstance
	_ [88]byte
}

func (obj *BaseInfo) c() *C.GIBaseInfo {
	return (*C.GIBaseInfo)(unsafe.Pointer(obj))
}

func (obj *BaseInfo) AsGIBaseInfo() *BaseInfo {
	return obj
}

type BaseInfoStack struct {
	_ structs.HostLayout
	_ [96]byte
}

func (s *BaseInfoStack) c() *C.GIBaseInfoStack {
	return (*C.GIBaseInfoStack)(unsafe.Pointer(s))
}

var TypeCallableInfo = g.ToType[CallableInfo](uint64(C.gi_callable_info_get_type()))

type CallableInfo struct {
	_ structs.HostLayout
	BaseInfo
}

func (obj *CallableInfo) c() *C.GICallableInfo {
	return (*C.GICallableInfo)(unsafe.Pointer(obj))
}

func (obj *CallableInfo) AsGICallableInfo() *CallableInfo {
	return obj
}

var TypeCallbackInfo = g.ToType[CallbackInfo](uint64(C.gi_callback_info_get_type()))

type CallbackInfo struct {
	_ structs.HostLayout
	CallableInfo
}

func (obj *CallbackInfo) c() *C.GICallbackInfo {
	return (*C.GICallbackInfo)(unsafe.Pointer(obj))
}

func (obj *CallbackInfo) AsGICallbackInfo() *CallbackInfo {
	return obj
}

var TypeConstantInfo = g.ToType[ConstantInfo](uint64(C.gi_constant_info_get_type()))

type ConstantInfo struct {
	_ structs.HostLayout
	BaseInfo
}

func (obj *ConstantInfo) c() *C.GIConstantInfo {
	return (*C.GIConstantInfo)(unsafe.Pointer(obj))
}

func (obj *ConstantInfo) AsGIConstantInfo() *ConstantInfo {
	return obj
}

var TypeEnumInfo = g.ToType[EnumInfo](uint64(C.gi_enum_info_get_type()))

type EnumInfo struct {
	_ structs.HostLayout
	RegisteredTypeInfo
}

func (obj *EnumInfo) c() *C.GIEnumInfo {
	return (*C.GIEnumInfo)(unsafe.Pointer(obj))
}

func (obj *EnumInfo) AsGIEnumInfo() *EnumInfo {
	return obj
}

var TypeFieldInfo = g.ToType[FieldInfo](uint64(C.gi_field_info_get_type()))

type FieldInfo struct {
	_ structs.HostLayout
	BaseInfo
}

func (obj *FieldInfo) c() *C.GIFieldInfo {
	return (*C.GIFieldInfo)(unsafe.Pointer(obj))
}

func (obj *FieldInfo) AsGIFieldInfo() *FieldInfo {
	return obj
}

var TypeFlagsInfo = g.ToType[FlagsInfo](uint64(C.gi_flags_info_get_type()))

type FlagsInfo struct {
	_ structs.HostLayout
	EnumInfo
}

func (obj *FlagsInfo) c() *C.GIFlagsInfo {
	return (*C.GIFlagsInfo)(unsafe.Pointer(obj))
}

func (obj *FlagsInfo) AsGIFlagsInfo() *FlagsInfo {
	return obj
}

var TypeFunctionInfo = g.ToType[FunctionInfo](uint64(C.gi_function_info_get_type()))

type FunctionInfo struct {
	_ structs.HostLayout
	CallableInfo
}

func (obj *FunctionInfo) c() *C.GIFunctionInfo {
	return (*C.GIFunctionInfo)(unsafe.Pointer(obj))
}

func (obj *FunctionInfo) AsGIFunctionInfo() *FunctionInfo {
	return obj
}

var TypeInterfaceInfo = g.ToType[InterfaceInfo](uint64(C.gi_interface_info_get_type()))

type InterfaceInfo struct {
	_ structs.HostLayout
	RegisteredTypeInfo
}

func (obj *InterfaceInfo) c() *C.GIInterfaceInfo {
	return (*C.GIInterfaceInfo)(unsafe.Pointer(obj))
}

func (obj *InterfaceInfo) AsGIInterfaceInfo() *InterfaceInfo {
	return obj
}

var TypeObjectInfo = g.ToType[ObjectInfo](uint64(C.gi_object_info_get_type()))

type ObjectInfo struct {
	_ structs.HostLayout
	RegisteredTypeInfo
}

func (obj *ObjectInfo) c() *C.GIObjectInfo {
	return (*C.GIObjectInfo)(unsafe.Pointer(obj))
}

func (obj *ObjectInfo) AsGIObjectInfo() *ObjectInfo {
	return obj
}

var TypePropertyInfo = g.ToType[PropertyInfo](uint64(C.gi_property_info_get_type()))

type PropertyInfo struct {
	_ structs.HostLayout
	BaseInfo
}

func (obj *PropertyInfo) c() *C.GIPropertyInfo {
	return (*C.GIPropertyInfo)(unsafe.Pointer(obj))
}

func (obj *PropertyInfo) AsGIPropertyInfo() *PropertyInfo {
	return obj
}

var TypeRegisteredTypeInfo = g.ToType[RegisteredTypeInfo](uint64(C.gi_registered_type_info_get_type()))

type RegisteredTypeInfo struct {
	_ structs.HostLayout
	BaseInfo
}

func (obj *RegisteredTypeInfo) c() *C.GIRegisteredTypeInfo {
	return (*C.GIRegisteredTypeInfo)(unsafe.Pointer(obj))
}

func (obj *RegisteredTypeInfo) AsGIRegisteredTypeInfo() *RegisteredTypeInfo {
	return obj
}

var TypeRepository = g.ToType[Repository](uint64(C.gi_repository_get_type()))

type Repository struct {
	_ structs.HostLayout
	g.Object
	_ [96]byte
}

func (obj *Repository) c() *C.GIRepository {
	return (*C.GIRepository)(unsafe.Pointer(obj))
}

func (obj *Repository) AsGIRepository() *Repository {
	return obj
}

var TypeSignalInfo = g.ToType[SignalInfo](uint64(C.gi_signal_info_get_type()))

type SignalInfo struct {
	_ structs.HostLayout
	CallableInfo
}

func (obj *SignalInfo) c() *C.GISignalInfo {
	return (*C.GISignalInfo)(unsafe.Pointer(obj))
}

func (obj *SignalInfo) AsGISignalInfo() *SignalInfo {
	return obj
}

var TypeStructInfo = g.ToType[StructInfo](uint64(C.gi_struct_info_get_type()))

type StructInfo struct {
	_ structs.HostLayout
	RegisteredTypeInfo
}

func (obj *StructInfo) c() *C.GIStructInfo {
	return (*C.GIStructInfo)(unsafe.Pointer(obj))
}

func (obj *StructInfo) AsGIStructInfo() *StructInfo {
	return obj
}

var TypeTypeInfo = g.ToType[TypeInfo](uint64(C.gi_type_info_get_type()))

type TypeInfo struct {
	_ structs.HostLayout
	BaseInfo
	_ [48]byte
}

func (obj *TypeInfo) c() *C.GITypeInfo {
	return (*C.GITypeInfo)(unsafe.Pointer(obj))
}

func (obj *TypeInfo) AsGITypeInfo() *TypeInfo {
	return obj
}

type Typelib struct {
	_ structs.HostLayout
	_ [0]byte
}

func (s *Typelib) c() *C.GITypelib {
	return (*C.GITypelib)(unsafe.Pointer(s))
}

func TypelibNewFromBytes(bytes *g.Bytes) (r *Typelib, err error) {
	arg0 := (*C.GBytes)(unsafe.Pointer(bytes))
	var gerr *C.GError
	cr := C.gi_typelib_new_from_bytes(arg0, &gerr)
	r = (*Typelib)(unsafe.Pointer(cr))
	err = (*g.Error)(unsafe.Pointer(gerr))
	return
}

func (s *Typelib) GetNamespace() (r string) {

	cr := C.gi_typelib_get_namespace(s.c())
	r = C.GoString(cr)
	return
}

func (s *Typelib) Ref() (r *Typelib) {

	cr := C.gi_typelib_ref(s.c())
	r = (*Typelib)(unsafe.Pointer(cr))
	return
}

func (s *Typelib) Symbol(symbol_name string) (symbol unsafe.Pointer, r bool) {
	arg0 := C.CString(symbol_name)
	defer C.free(unsafe.Pointer(arg0))
	arg1 := (unsafe.Pointer)(symbol)
	cr := C.gi_typelib_symbol(s.c(), arg0, &arg1)
	symbol = (unsafe.Pointer)(arg1)
	r = cr != 0
	return
}

func (s *Typelib) Unref() {

	C.gi_typelib_unref(s.c())

	return
}

var TypeUnionInfo = g.ToType[UnionInfo](uint64(C.gi_union_info_get_type()))

type UnionInfo struct {
	_ structs.HostLayout
	RegisteredTypeInfo
}

func (obj *UnionInfo) c() *C.GIUnionInfo {
	return (*C.GIUnionInfo)(unsafe.Pointer(obj))
}

func (obj *UnionInfo) AsGIUnionInfo() *UnionInfo {
	return obj
}

var TypeUnresolvedInfo = g.ToType[UnresolvedInfo](uint64(C.gi_unresolved_info_get_type()))

type UnresolvedInfo struct {
	_ structs.HostLayout
	BaseInfo
	_ [16]byte
}

func (obj *UnresolvedInfo) c() *C.GIUnresolvedInfo {
	return (*C.GIUnresolvedInfo)(unsafe.Pointer(obj))
}

func (obj *UnresolvedInfo) AsGIUnresolvedInfo() *UnresolvedInfo {
	return obj
}

var TypeVFuncInfo = g.ToType[VFuncInfo](uint64(C.gi_vfunc_info_get_type()))

type VFuncInfo struct {
	_ structs.HostLayout
	CallableInfo
}

func (obj *VFuncInfo) c() *C.GIVFuncInfo {
	return (*C.GIVFuncInfo)(unsafe.Pointer(obj))
}

func (obj *VFuncInfo) AsGIVFuncInfo() *VFuncInfo {
	return obj
}

var TypeValueInfo = g.ToType[ValueInfo](uint64(C.gi_value_info_get_type()))

type ValueInfo struct {
	_ structs.HostLayout
	BaseInfo
}

func (obj *ValueInfo) c() *C.GIValueInfo {
	return (*C.GIValueInfo)(unsafe.Pointer(obj))
}

func (obj *ValueInfo) AsGIValueInfo() *ValueInfo {
	return obj
}
