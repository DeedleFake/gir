// Code generated by girgen. DO NOT EDIT.

package gi

/*
#cgo pkg-config: girepository-2.0
#include <girepository/girepository.h>
*/
import "C"

import (
	"structs"
	"unsafe"

	"deedles.dev/gir/g"
)

type AttributeIter struct {
	_ structs.HostLayout
	_ [40]byte

	// data

	// _dummy

}

func (s *AttributeIter) c() *C.GIAttributeIter {
	return (*C.GIAttributeIter)(unsafe.Pointer(s))
}

type BaseInfoStack struct {
	_ structs.HostLayout
	_ [96]byte

	// parent_instance

	// dummy0

	// dummy1

	// dummy2

	// dummy3

}

func (s *BaseInfoStack) c() *C.GIBaseInfoStack {
	return (*C.GIBaseInfoStack)(unsafe.Pointer(s))
}

type Typelib struct {
	_ structs.HostLayout
	_ [0]byte
}

func (s *Typelib) c() *C.GITypelib {
	return (*C.GITypelib)(unsafe.Pointer(s))
}

func TypelibNewFromBytes(bytes *g.Bytes) (r *Typelib, err error) {
	arg0 := (*C.GBytes)(unsafe.Pointer(bytes))
	var gerr *C.GError
	cr := C.gi_typelib_new_from_bytes(arg0, &gerr)
	r = (*Typelib)(unsafe.Pointer(cr))
	err = (*g.Error)(unsafe.Pointer(gerr))
	return
}

func (s *Typelib) GetNamespace() (r string) {

	cr := C.gi_typelib_get_namespace(s.c())
	r = C.GoString(cr)
	return
}

func (s *Typelib) Ref() (r *Typelib) {

	cr := C.gi_typelib_ref(s.c())
	r = (*Typelib)(unsafe.Pointer(cr))
	return
}

func (s *Typelib) Symbol(symbol_name string) (symbol unsafe.Pointer, r bool) {
	arg0 := C.CString(symbol_name)
	defer C.free(unsafe.Pointer(arg0))
	arg1 := (unsafe.Pointer)(symbol)
	cr := C.gi_typelib_symbol(s.c(), arg0, &arg1)
	symbol = (unsafe.Pointer)(arg1)
	r = cr != 0
	return
}

func (s *Typelib) Unref() {

	C.gi_typelib_unref(s.c())

	return
}
